import{_ as n,c as t,o as s,N as e}from"./chunks/framework.255dec5c.js";const a="/personalBlogs/assets/1725002100125.59eef75d.png",h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/Tween.js 基本使用.md"}'),l={name:"blogs/Tween.js 基本使用.md"},o=e(`<p>Tween.js 官网文档：<a href="https://tweenjs.github.io/tween.js/docs/user_guide.html" target="_blank" rel="noreferrer">tween.js user guide | tween.js (tweenjs.github.io)</a></p><h2 id="tween-js-基本使用" tabindex="-1">Tween.js 基本使用 <a class="header-anchor" href="#tween-js-基本使用" aria-label="Permalink to &quot;Tween.js 基本使用&quot;">​</a></h2><h3 id="_1-引入-tween-js" tabindex="-1">1. 引入 Tween.js <a class="header-anchor" href="#_1-引入-tween-js" aria-label="Permalink to &quot;1. 引入 Tween.js&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">import TWEEN from &quot;./tween.js-master/dist/tween.esm.js&quot;</span></span></code></pre></div><h3 id="_2-定义基本-tween-动画" tabindex="-1">2. 定义基本 Tween 动画 <a class="header-anchor" href="#_2-定义基本-tween-动画" aria-label="Permalink to &quot;2. 定义基本 Tween 动画&quot;">​</a></h3><p><strong>目的</strong>：将 model 模型的位置，从原来的 (0,0,0) 位置，经过 1s 移动到 (20,50,30) 的位置。</p><p>模式一：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">// 1 设置动画</span></span>
<span class="line"><span style="color:#A6ACCD;">const action=new TWEEN.Tween({x:0,y:0,z:0}) // 初始值</span></span>
<span class="line"><span style="color:#A6ACCD;">    .to({x:20,y:50,z:30},1000) // 目标值，毫秒数</span></span>
<span class="line"><span style="color:#A6ACCD;">    // 在动画执行期，不断被调用。其中obj为&quot;to&quot;里面的内容</span></span>
<span class="line"><span style="color:#A6ACCD;">    .onUpdate(function(obj){ </span></span>
<span class="line"><span style="color:#A6ACCD;">        model.position.x=obj.x; // x:20</span></span>
<span class="line"><span style="color:#A6ACCD;">        model.position.y=obj.y;</span></span>
<span class="line"><span style="color:#A6ACCD;">        model.position.z=obj.z;</span></span>
<span class="line"><span style="color:#A6ACCD;">    })</span></span>
<span class="line"><span style="color:#A6ACCD;">    .start()</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 2 启动动画</span></span>
<span class="line"><span style="color:#A6ACCD;">function loop(){</span></span>
<span class="line"><span style="color:#A6ACCD;">    // 更新动画</span></span>
<span class="line"><span style="color:#A6ACCD;">    TWEEN.update() </span></span>
<span class="line"><span style="color:#A6ACCD;">    requestAnimationFrame(render);</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>模式二：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const action=new TWEEN.Tween(model.position) // 初始值：模型的初始位置</span></span>
<span class="line"><span style="color:#A6ACCD;">    .to({x:20,y:50,z:30},1000) // 目标值，毫秒数</span></span>
<span class="line"><span style="color:#A6ACCD;">    .start()</span></span></code></pre></div><h3 id="_3-字段说明" tabindex="-1">3 字段说明 <a class="header-anchor" href="#_3-字段说明" aria-label="Permalink to &quot;3 字段说明&quot;">​</a></h3><p>const action=new TWEEN.Tween(需添加动画的属性)</p><table><thead><tr><th style="text-align:center;">字段</th><th style="text-align:center;">含义</th><th style="text-align:center;">示例</th><th style="text-align:center;">备注</th></tr></thead><tbody><tr><td style="text-align:center;">start</td><td style="text-align:center;">执行动画</td><td style="text-align:center;">action.start()<br>action.start(num)</td><td style="text-align:center;">.start(毫秒数)：延迟 <code>n毫秒</code>之后运行动画</td></tr><tr><td style="text-align:center;">stop</td><td style="text-align:center;">停止动画</td><td style="text-align:center;">action.stop( )</td><td style="text-align:center;">停止的动画必须为正在运行的动画</td></tr><tr><td style="text-align:center;">chain</td><td style="text-align:center;">链式执行动画</td><td style="text-align:center;">actA.chain(actB,actC)</td><td style="text-align:center;">当 <code>actA</code>动画执行完后,立即执行 <code>actB</code>和 <code>actC</code>动画，其中B和C同时被执行。2. 前提:actA.start( ), actB和actC不需要开启.start( )</td></tr><tr><td style="text-align:center;">repeat</td><td style="text-align:center;">重复执行动画</td><td style="text-align:center;">action.repeat(num) action.repeat(Infinity)</td><td style="text-align:center;">num 重复执行的次数 2. Infinity 无限循环</td></tr><tr><td style="text-align:center;">yoyo</td><td style="text-align:center;">重复执行时是否衔接（起始值-结束值-起始值）溜溜球</td><td style="text-align:center;">action.yoyo(true)</td><td style="text-align:center;">只有在 <code>repeat( )</code>独立使用时有效</td></tr><tr><td style="text-align:center;">delay</td><td style="text-align:center;">延迟执行动画</td><td style="text-align:center;">action.delay(num)</td><td style="text-align:center;"><code>action.delay(1000).start( )</code> 延迟1000毫秒后执行动画,<code>delay</code>在 <code>start</code>之前</td></tr><tr><td style="text-align:center;">to</td><td style="text-align:center;">控制动画结束时的目标值+动画持续时间(毫秒)</td><td style="text-align:center;">action.to(object,num)</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">easing</td><td style="text-align:center;">缓动动画</td><td style="text-align:center;">TWEEN.Easing.<code>easing函数</code>.<code>easing类型</code></td><td style="text-align:center;"><code>easing函数</code>:算法-&gt;运动效果 <code>easing函数</code>:算法起作用的地方 <code>In</code>、<code>Out</code>、<code>InOut</code></td></tr><tr><td style="text-align:center;">onUpdate</td><td style="text-align:center;">在动画播放时，一直被调用</td><td style="text-align:center;">onUpdate(function)</td><td style="text-align:center;">function(obj){ } 形参obj指目标值(to( )的第1个参数)</td></tr><tr><td style="text-align:center;">onStart</td><td style="text-align:center;">动画开始播放时被调用一次</td><td style="text-align:center;">onStart(function)</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">onComplete</td><td style="text-align:center;">动画结束时被调用一次</td><td style="text-align:center;">onComplete(function)</td><td style="text-align:center;"></td></tr></tbody></table><p>警告：调用 <code>actA.chain（actB）</code> 实际上修改了 actA，所以 <code>chain</code> 的返回值只是 actA，不是一个新的 tween。</p><p>警告：<code>yoyo(true)</code> 只有在 <code>repeat(Infinity||200)</code>单独使用时有效</p><h3 id="_4-easing-缓动动画" tabindex="-1">4 easing 缓动动画 <a class="header-anchor" href="#_4-easing-缓动动画" aria-label="Permalink to &quot;4 easing 缓动动画&quot;">​</a></h3><p>地址：/tween.js-master/examples/03_graphs.html <a href="https://github.com/tweenjs/tween.js/blob/master/examples/03_graphs.html" target="_blank" rel="noreferrer">官方网址 · GitHub</a></p><p><img src="`+a+`" alt="1725002100125"></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">// 动画开始缓动-类比加速器</span></span>
<span class="line"><span style="color:#A6ACCD;">action.easing(TWEEN.Easing.Sinusoidal.In);</span></span>
<span class="line"><span style="color:#A6ACCD;">// 动画结束时缓动-类比减速刹车</span></span>
<span class="line"><span style="color:#A6ACCD;">action.easing(TWEEN.Easing.Sinusoidal.Out);</span></span>
<span class="line"><span style="color:#A6ACCD;">// 同时设置In和Out</span></span>
<span class="line"><span style="color:#A6ACCD;">action.easing(TWEEN.Easing.Sinusoidal.InOut);</span></span></code></pre></div><h3 id="_5-例-相机旋转-模型淡入淡出动画" tabindex="-1">5 例：相机旋转 + 模型淡入淡出动画 <a class="header-anchor" href="#_5-例-相机旋转-模型淡入淡出动画" aria-label="Permalink to &quot;5 例：相机旋转 + 模型淡入淡出动画&quot;">​</a></h3><p><strong>目的：</strong></p><ol><li>当镜头移动时，镜头始终对准 model 模型，模型呈现淡入的效果</li><li>当移动返回时，镜头始终对准 model 模型，模型呈现淡出的效果</li></ol><p>镜头移动动画：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const cameraAct=new TWEEN.Tween(camera.position)</span></span>
<span class="line"><span style="color:#A6ACCD;">    .to({x:-100},3000)</span></span>
<span class="line"><span style="color:#A6ACCD;">    // 相机移动时，焦点始终为模型的位置</span></span>
<span class="line"><span style="color:#A6ACCD;">    .onUpdate(function(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        camera.lookAt(model.position)</span></span>
<span class="line"><span style="color:#A6ACCD;">    })</span></span>
<span class="line"><span style="color:#A6ACCD;">    .start()</span></span></code></pre></div><p>模型淡入动画：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const meshActIn = new TWEEN.Tween({ opacity: 0.0 })</span></span>
<span class="line"><span style="color:#A6ACCD;">    .to({ opacity: 1.0 }, 3000)</span></span>
<span class="line"><span style="color:#A6ACCD;">    // 动画开始：开启材质的透明度</span></span>
<span class="line"><span style="color:#A6ACCD;">    .onStart(function () {</span></span>
<span class="line"><span style="color:#A6ACCD;">        mat.transparent = true;</span></span>
<span class="line"><span style="color:#A6ACCD;">    })</span></span>
<span class="line"><span style="color:#A6ACCD;">    .onUpdate(function (obj) {</span></span>
<span class="line"><span style="color:#A6ACCD;">        mat.opacity = obj.opacity;</span></span>
<span class="line"><span style="color:#A6ACCD;">    })</span></span>
<span class="line"><span style="color:#A6ACCD;">    // 动画结束：关闭材质的透明度</span></span>
<span class="line"><span style="color:#A6ACCD;">    .onComplete(function () {</span></span>
<span class="line"><span style="color:#A6ACCD;">        mat.transparent = false;</span></span>
<span class="line"><span style="color:#A6ACCD;">    })</span></span>
<span class="line"><span style="color:#A6ACCD;">    .start();</span></span></code></pre></div><p>模型淡出动画：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const meshActOut =new TWEEN.Tween({opacity:mat.opacity})</span></span>
<span class="line"><span style="color:#A6ACCD;">    .to({opacity:0.0}, 3000)</span></span>
<span class="line"><span style="color:#A6ACCD;">    // 动画开始：允许透明opacity属性才能生效</span></span>
<span class="line"><span style="color:#A6ACCD;">    .onStart(function(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        material.transparent = true;</span></span>
<span class="line"><span style="color:#A6ACCD;">    })</span></span>
<span class="line"><span style="color:#A6ACCD;">    .onUpdate(function(obj){</span></span>
<span class="line"><span style="color:#A6ACCD;">        material.opacity = obj.opacity</span></span>
<span class="line"><span style="color:#A6ACCD;">    })</span></span>
<span class="line"><span style="color:#A6ACCD;">    .start();</span></span></code></pre></div><h3 id="备注" tabindex="-1">备注 <a class="header-anchor" href="#备注" aria-label="Permalink to &quot;备注&quot;">​</a></h3><ol><li><p>材质需开启 <code>transparent</code>，才能设置透明程度 <code>opacity</code></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const mat = new THREE.MeshLambertMaterial({</span></span>
<span class="line"><span style="color:#A6ACCD;">    color: 0x00ffff,</span></span>
<span class="line"><span style="color:#A6ACCD;">    transparent: true,</span></span>
<span class="line"><span style="color:#A6ACCD;">    opacity: 0.8,</span></span>
<span class="line"><span style="color:#A6ACCD;">});</span></span></code></pre></div></li><li><p>调用 <code>actA.chain（actB）</code> 实际上修改了 actA，所以 <code>chain</code> 的返回值只是 actA，不是一个新的 tween。</p></li><li><p><code>yoyo(true)</code> 只有在 <code>repeat(Infinity||200)</code>单独使用时有效</p></li></ol>`,30),p=[o];function c(i,r,d,y,C,A){return s(),t("div",null,p)}const u=n(l,[["render",c]]);export{h as __pageData,u as default};
