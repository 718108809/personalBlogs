import{_ as s,c as a,o as n,N as l}from"./chunks/framework.255dec5c.js";const A=JSON.parse('{"title":"threejs logarithmicDepthBuffer 开启后 ShaderMaterial 会被模型遮挡问题","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/Threejs logarithmicDepthBuffer 开启后 ShaderMaterial 会被模型遮挡问题.md"}'),p={name:"blogs/Threejs logarithmicDepthBuffer 开启后 ShaderMaterial 会被模型遮挡问题.md"},o=l(`<h1 id="threejs-logarithmicdepthbuffer-开启后-shadermaterial-会被模型遮挡问题" tabindex="-1">threejs logarithmicDepthBuffer 开启后 ShaderMaterial 会被模型遮挡问题 <a class="header-anchor" href="#threejs-logarithmicdepthbuffer-开启后-shadermaterial-会被模型遮挡问题" aria-label="Permalink to &quot;threejs logarithmicDepthBuffer 开启后 ShaderMaterial 会被模型遮挡问题&quot;">​</a></h1><blockquote><p>logarithmicDepthBuffer 关闭展示正常，开启 ShaderMaterial 就会被遮挡。</p></blockquote><p>logarithmicDepthBuffer 关闭展示正常，开启 ShaderMaterial 就会被遮挡。但是关闭 logarithmicDepthBuffer 的话模型加载可能会出现闪烁。</p><p>需要修改 ShaderMaterial 的顶点着色器和片元着色器</p><p>首先需要引入 threejs 的 ShaderChunk</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> THREE </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">three</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// THREE.ShaderChunk即为所需要使用的ShaderChunk</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(THREE</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ShaderChunk</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ShaderChunk====</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> material </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ShaderMaterial</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">vertexShader</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">            </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ShaderChunk</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">logdepthbuf_pars_vertex </span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> // 新增的</span></span>
<span class="line"><span style="color:#C3E88D;">            bool isPerspectiveMatrix (mat4) { // 新增的</span></span>
<span class="line"><span style="color:#C3E88D;">                return true; // 新增的</span></span>
<span class="line"><span style="color:#C3E88D;">            } // 新增的</span></span>
<span class="line"><span style="color:#C3E88D;">            varying vec2 vUv;</span></span>
<span class="line"><span style="color:#C3E88D;">            varying vec3 viewDir;</span></span>
<span class="line"><span style="color:#C3E88D;">            varying vec3 worldNormal;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">            void main() {</span></span>
<span class="line"><span style="color:#C3E88D;">                vUv = uv;</span></span>
<span class="line"><span style="color:#C3E88D;">                vec4 worldPosition = modelMatrix * vec4(position, 1.0);</span></span>
<span class="line"><span style="color:#C3E88D;">                vec4 viewPosition = viewMatrix * worldPosition;</span></span>
<span class="line"><span style="color:#C3E88D;">                viewDir = normalize(viewPosition.xyz);</span></span>
<span class="line"><span style="color:#C3E88D;">                worldNormal = normalize(normalMatrix * normal);</span></span>
<span class="line"><span style="color:#C3E88D;">                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);</span></span>
<span class="line"><span style="color:#C3E88D;">                </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ShaderChunk</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">logdepthbuf_vertex </span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> // 新增的</span></span>
<span class="line"><span style="color:#C3E88D;">            }</span></span>
<span class="line"><span style="color:#C3E88D;">        </span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">fragmentShader</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">            </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ShaderChunk</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">logdepthbuf_pars_fragment </span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> // 新增的</span></span>
<span class="line"><span style="color:#C3E88D;">            varying vec3 viewDir;</span></span>
<span class="line"><span style="color:#C3E88D;">            varying vec3 worldNormal;</span></span>
<span class="line"><span style="color:#C3E88D;">            varying vec2 vUv;</span></span>
<span class="line"><span style="color:#C3E88D;">            uniform vec3 beamColor;</span></span>
<span class="line"><span style="color:#C3E88D;">            uniform float beamIntensity;</span></span>
<span class="line"><span style="color:#C3E88D;">            void main() {</span></span>
<span class="line"><span style="color:#C3E88D;">                vec3 beamEffect = beamColor * beamIntensity;</span></span>
<span class="line"><span style="color:#C3E88D;">                float dotProduct = abs(dot(viewDir, worldNormal));</span></span>
<span class="line"><span style="color:#C3E88D;">                gl_FragColor = vec4(beamEffect, dotProduct);</span></span>
<span class="line"><span style="color:#C3E88D;">                gl_FragColor = vec4(beamEffect, dotProduct * vUv.y);</span></span>
<span class="line"><span style="color:#C3E88D;">                </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ShaderChunk</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">logdepthbuf_fragment </span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> // 新增的</span></span>
<span class="line"><span style="color:#C3E88D;">            }</span></span>
<span class="line"><span style="color:#C3E88D;">        </span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">side</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">DoubleSide</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">uniforms</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">beamColor</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Color</span><span style="color:#A6ACCD;">(color) </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">beamIntensity</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> intensity </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">transparent</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 如果需要透明效果，设置为true</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">depthWrite</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>需要在vertexShader 顶点着色器上添加</p><div class="language-jjs"><button title="Copy Code" class="copy"></button><span class="lang">jjs</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">\${ THREE.ShaderChunk.logdepthbuf_pars_vertex }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">            bool isPerspectiveMatrix(mat4) {</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">                return true;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">            }</span></span></code></pre></div><p>和</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">THREE</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ShaderChunk</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">logdepthbuf_vertex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span></code></pre></div><p>fragmentShader 片元着色器添加</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">THREE</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ShaderChunk</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">logdepthbuf_pars_fragment</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span></code></pre></div><p>和</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">THREE</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ShaderChunk</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">logdepthbuf_fragment</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span></code></pre></div>`,14),e=[o];function t(r,c,D,y,i,C){return n(),a("div",null,e)}const h=s(p,[["render",t]]);export{A as __pageData,h as default};
