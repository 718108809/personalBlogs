import{_ as s,c as a,o as n,N as l}from"./chunks/framework.255dec5c.js";const F=JSON.parse('{"title":"1、什么是Set()","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/new Set()的基础用法(ES6).md"}'),e={name:"blogs/new Set()的基础用法(ES6).md"},o=l(`<h1 id="_1、什么是set" tabindex="-1">1、什么是Set() <a class="header-anchor" href="#_1、什么是set" aria-label="Permalink to &quot;1、什么是Set()&quot;">​</a></h1><p>Set是<a href="https://so.csdn.net/so/search?q=es6&amp;spm=1001.2101.3001.7020" target="_blank" rel="noreferrer">es6</a>新增的数据结构，<strong>似于数组</strong>，但它的一大特性就是<strong>所有元素都是唯一的</strong>，没有重复的值，我们一般称为集合。</p><p>Set本身是一个构造函数，用来生成 Set 数据结构</p><h1 id="_2、增删改查方法" tabindex="-1">2、增删改查方法 <a class="header-anchor" href="#_2、增删改查方法" aria-label="Permalink to &quot;2、增删改查方法&quot;">​</a></h1><h6 id="_2-1-添加元素add" tabindex="-1">2.1 添加元素<code>add</code> <a class="header-anchor" href="#_2-1-添加元素add" aria-label="Permalink to &quot;2.1 添加元素\`add\`&quot;">​</a></h6><p>添加某个值，返回 Set 结构本身，当添加实例中已经存在的元素，set不会进行处理添加</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">let list</span><span style="color:#89DDFF;">=new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">)</span><span style="color:#676E95;font-style:italic;">   // 2只被添加了一次</span></span></code></pre></div><h6 id="_2-2-删除元素-delete" tabindex="-1">2.2 删除元素 <code>delete</code> <a class="header-anchor" href="#_2-2-删除元素-delete" aria-label="Permalink to &quot;2.2 删除元素 \`delete\`&quot;">​</a></h6><p>删除某个值，返回一个布尔值，表示删除是否成功</p><div class="language-auto"><button title="Copy Code" class="copy"></button><span class="lang">auto</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">let list=new Set([1,20,30,40])</span></span>
<span class="line"><span style="color:#A6ACCD;">list.delete(30)      //删除值为30的元素，这里的30并非下标</span></span></code></pre></div><h6 id="_2-3-判断某元素是否存在has" tabindex="-1">2.3 判断某元素是否存在<code>has</code> <a class="header-anchor" href="#_2-3-判断某元素是否存在has" aria-label="Permalink to &quot;2.3 判断某元素是否存在\`has\`&quot;">​</a></h6><p>返回一个布尔值，判断该值是否为Set的成员</p><div class="language-auto"><button title="Copy Code" class="copy"></button><span class="lang">auto</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">let list=new Set([1,2,3,4])</span></span>
<span class="line"><span style="color:#A6ACCD;">list.has(2)//true</span></span></code></pre></div><h6 id="_2-4-清除所有元素clear" tabindex="-1">2.4 清除所有元素<code>clear</code> <a class="header-anchor" href="#_2-4-清除所有元素clear" aria-label="Permalink to &quot;2.4 清除所有元素\`clear\`&quot;">​</a></h6><p>清除所有成员，没有返回值</p><div class="language-auto"><button title="Copy Code" class="copy"></button><span class="lang">auto</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">let list=new Set([1,2,3,4])</span></span>
<span class="line"><span style="color:#A6ACCD;">list.clear()</span></span></code></pre></div><h1 id="_3、遍历方法" tabindex="-1">3、遍历方法 <a class="header-anchor" href="#_3、遍历方法" aria-label="Permalink to &quot;3、遍历方法&quot;">​</a></h1><h6 id="_3-1-遍历-keys" tabindex="-1">3.1 遍历 <code>keys()</code> <a class="header-anchor" href="#_3-1-遍历-keys" aria-label="Permalink to &quot;3.1 遍历 \`keys()\`&quot;">​</a></h6><p>返回键名的遍历器，相等于返回键值遍历器values()</p><div class="language-auto"><button title="Copy Code" class="copy"></button><span class="lang">auto</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">let list2=new Set([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;])</span></span>
<span class="line"><span style="color:#A6ACCD;">for(let key of list2.keys()){</span></span>
<span class="line"><span style="color:#A6ACCD;">   console.log(key)//a,b,c</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><h6 id="_3-2-遍历-values" tabindex="-1">3.2 遍历 <code>values()</code> <a class="header-anchor" href="#_3-2-遍历-values" aria-label="Permalink to &quot;3.2 遍历 \`values()\`&quot;">​</a></h6><p>返回键值的遍历器</p><div class="language-auto"><button title="Copy Code" class="copy"></button><span class="lang">auto</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">let list=new Set([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;])</span></span>
<span class="line"><span style="color:#A6ACCD;">for(let value of list.values()){</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(value)//a,b,c</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><h6 id="_3-3-遍历-entries" tabindex="-1">3.3 遍历 <code>entries()</code> <a class="header-anchor" href="#_3-3-遍历-entries" aria-label="Permalink to &quot;3.3 遍历 \`entries()\`&quot;">​</a></h6><p>返回键值对的遍历器</p><div class="language-auto"><button title="Copy Code" class="copy"></button><span class="lang">auto</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">let list=new Set([&#39;4&#39;,&#39;5&#39;,&#39;hello&#39;])</span></span>
<span class="line"><span style="color:#A6ACCD;">for (let item of list.entries()) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(item);</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">// [&#39;4&#39;,&#39;4&#39;]   [&#39;5&#39;,&#39;5&#39;]   [&#39;hello&#39;,&#39;hello&#39;]</span></span></code></pre></div><h6 id="_3-4-遍历-foreach" tabindex="-1">3.4 遍历 <code>forEach()</code> <a class="header-anchor" href="#_3-4-遍历-foreach" aria-label="Permalink to &quot;3.4 遍历 \`forEach()\`&quot;">​</a></h6><p>使用回调函数遍历每个成员</p><div class="language-auto"><button title="Copy Code" class="copy"></button><span class="lang">auto</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">let list=new Set([&#39;4&#39;,&#39;5&#39;,&#39;hello&#39;])</span></span>
<span class="line"><span style="color:#A6ACCD;">list.forEach((value, key) =&gt; console.log(key + &#39; : &#39; + value))</span></span>
<span class="line"><span style="color:#A6ACCD;">// 4:4    5:5   hello:hello</span></span></code></pre></div><h1 id="_4、使用情形" tabindex="-1">4、使用情形 <a class="header-anchor" href="#_4、使用情形" aria-label="Permalink to &quot;4、使用情形&quot;">​</a></h1><h6 id="_4-1-用于数组去重" tabindex="-1">4.1 用于数组去重 <a class="header-anchor" href="#_4-1-用于数组去重" aria-label="Permalink to &quot;4.1 用于数组去重&quot;">​</a></h6><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">let arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#A6ACCD;">let setArr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">)</span><span style="color:#676E95;font-style:italic;">     // 返回set数据结构  Set(3) {3, 5, 2}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//方法一   es6的...解构</span></span>
<span class="line"><span style="color:#A6ACCD;">let unique1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">...setArr </span><span style="color:#89DDFF;">];</span><span style="color:#676E95;font-style:italic;">      //去重转数组后  [3,5,2]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//方法二  Array.from()解析类数组为数组</span></span>
<span class="line"><span style="color:#A6ACCD;">let unique2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">setArr </span><span style="color:#89DDFF;">)</span><span style="color:#676E95;font-style:italic;">   //去重转数组后  [3,5,2]</span></span></code></pre></div><h6 id="_4-2-用于字符串去重" tabindex="-1">4.2 用于字符串去重 <a class="header-anchor" href="#_4-2-用于字符串去重" aria-label="Permalink to &quot;4.2 用于字符串去重&quot;">​</a></h6><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">let str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">352255</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">let unique </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">...</span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">)]</span><span style="color:#A6ACCD;">.join</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">&quot;&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">;</span><span style="color:#676E95;font-style:italic;">     // 352</span></span></code></pre></div><h6 id="_4-3-实现并集、交集、和差集" tabindex="-1">4.3 实现并集、交集、和差集 <a class="header-anchor" href="#_4-3-实现并集、交集、和差集" aria-label="Permalink to &quot;4.3 实现并集、交集、和差集&quot;">​</a></h6><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight has-diff"><code><span class="line"><span style="color:#A6ACCD;">let a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#89DDFF;">([</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">]);</span></span>
<span class="line"><span style="color:#A6ACCD;">let b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#89DDFF;">([</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 并集</span></span>
<span class="line"><span style="color:#A6ACCD;">let </span><span style="color:#C792EA;">union</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#89DDFF;">([</span><span style="color:#A6ACCD;">...</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ...</span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Set {1, 2, 3, 4}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 交集</span></span>
<span class="line"><span style="color:#A6ACCD;">let intersect </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#89DDFF;">([</span><span style="color:#A6ACCD;">...</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">.filter</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">has</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// set {2, 3}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// （a 相对于 b 的）差集</span></span>
<span class="line"><span style="color:#A6ACCD;">let difference </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#89DDFF;">([</span><span style="color:#A6ACCD;">...</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">.filter</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">has</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Set {1}</span></span></code></pre></div>`,36),p=[o];function t(c,r,y,i,D,C){return n(),a("div",null,p)}const d=s(e,[["render",t]]);export{F as __pageData,d as default};
